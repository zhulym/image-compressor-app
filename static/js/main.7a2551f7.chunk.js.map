{"version":3,"sources":["components/Instructions/index.jsx","components/Compressor/ImageCard/index.jsx","components/Compressor/Option/index.jsx","components/Compressor/index.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["Instructions","className","ImageCard","props","src","srcData","id","width","Option","htmlFor","label","type","name","value","onChange","Compressor","useState","upload","compressed","defaultImages","inputUrl","setInputUrl","outputUrl","setOutputUrl","imageFile","setImageFile","imageName","setImageName","sizeBefore","setSizeBefore","sizeAfter","setSizeAfter","isClicked","setIsClicked","isUpload","setIsUpload","maxSize","setMaxSize","maxWidth","setMaxWidth","handleCompressClick","a","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedImage","size","toFixed","URL","createObjectURL","console","log","e","target","Form","Group","controlId","Label","Control","accept","event","files","handleImageUpload","Button","variant","onClick","window","open","href","download","location","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a2551f7.chunk.js","sourcesContent":["// libraries\r\nimport React from 'react';\r\n// static\r\n// styles\r\n\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <div className=\"instructions\">\r\n      <h3>To compress jpeg and png images:</h3>\r\n      <div className=\"instruction__steps\">\r\n        <p>1. Upload Image</p>\r\n        <p>2. Set Options</p>\r\n        <p>3. Compress and download image</p>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Instructions;","// libraries\r\nimport React from 'react';\r\n// static\r\n// styles\r\nimport './ImageCard.css';\r\n\r\nconst ImageCard = (props) => {\r\n  const width = 600;\r\n  return (\r\n    <div className=\"preview\">\r\n      <img src={props.srcData} id=\"preview__image\" width={width} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageCard;","// libraries\r\nimport React from 'react';\r\n// static\r\n// styles\r\nimport './Option.css';\r\n\r\nconst Option = (props) => {\r\n  return (\r\n    <div className=\"options-item\">\r\n      <label className=\"image-label\" htmlFor={props.htmlFor}>{props.label}</label>\r\n      <input\r\n        id={props.id}\r\n        className={props.className}\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Option;","// libraries\r\nimport React, { useState } from 'react';\r\nimport imageCompression from 'browser-image-compression';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button'\r\n// static\r\nimport ImageCard from './ImageCard/index'\r\nimport Option from './Option/index'\r\n// styles\r\nimport './Compressor.css'\r\n\r\nconst Compressor = () => {\r\n  const [defaultImages, setDefaultImages] = useState({\r\n    upload: 'https://user-images.githubusercontent.com/75386560/127773454-71dc5095-3694-4940-a4da-ee81c8d41243.png',\r\n    compressed: 'https://user-images.githubusercontent.com/75386560/127773885-f7297dc5-38b4-48ec-93f7-c275f654f5d0.png'\r\n  })\r\n  const [inputUrl, setInputUrl] = useState('');\r\n  const [outputUrl, setOutputUrl] = useState('');\r\n\r\n  const [imageFile, setImageFile] = useState('');\r\n  const [imageName, setImageName] = useState('');\r\n  const [sizeBefore, setSizeBefore] = useState('');\r\n\r\n  const [sizeAfter, setSizeAfter] = useState('');\r\n  const [isClicked, setIsClicked] = useState(false);\r\n  const [isUpload, setIsUpload] = useState(false);\r\n\r\n  const [maxSize, setMaxSize] = useState(1);\r\n  const [maxWidth, setMaxWidth] = useState(1366);\r\n\r\n  const handleImageUpload = (event) => {\r\n    const imageFile = event.target.files[0];\r\n    setImageFile(imageFile);\r\n    setImageName(imageFile.name);\r\n    setSizeBefore(`${(imageFile.size / 1024 / 1024).toFixed(2)} mb`);\r\n    setInputUrl(URL.createObjectURL(imageFile));\r\n    setIsUpload(true);\r\n  }\r\n  const handleCompressClick = async () => {\r\n    const options = {\r\n      maxSizeMB: maxSize,\r\n      maxWidthOrHeight: maxWidth,\r\n      useWebWorker: true\r\n    }\r\n\r\n    try {\r\n      const compressedImage = await imageCompression(imageFile, options);\r\n      setSizeAfter(`${(compressedImage.size / 1024 / 1024).toFixed(2)} mb`)\r\n      setOutputUrl(URL.createObjectURL(compressedImage));\r\n      setIsClicked(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  const handlePreviewClick = () => {\r\n    window.open(outputUrl);\r\n  }\r\n  const handleResetClick = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <div className=\"options\">\r\n      <p>Options</p>\r\n      <div className=\"options-container\">\r\n        <Option\r\n          id=\"image-size\"\r\n          htmlFor=\"image-size\"\r\n          label=\"Max size MB:\"\r\n          className=\"image-size\"\r\n          name=\"image-size\"\r\n          type=\"number\"\r\n          value={maxSize}\r\n          onChange={(e) => setMaxSize(e.target.value)}\r\n        />\r\n        <Option\r\n          id=\"image-width\"\r\n          htmlFor=\"image-width\"\r\n          label=\"Max width PX:\"\r\n          className=\"image-width\"\r\n          name=\"image-width\"\r\n          type=\"number\"\r\n          value={maxWidth}\r\n          onChange={(e) => setMaxWidth(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"items-wrapper d-flex justify-content-between\">\r\n        <Form.Group controlId=\"formFile\" className=\"mb-3\">\r\n          <Form.Label>Download image</Form.Label>\r\n          <Form.Control type=\"file\" accept=\"image/*\" onChange={(e) => handleImageUpload(e)} />\r\n        </Form.Group>\r\n        {isClicked && (\r\n          <div className=\"parameters d-flex justify-content-between align-items-end\">\r\n            <p>Size before: <span className=\"parameters-value\">{sizeBefore}</span></p>\r\n            <p>Size after: <span className=\"parameters-value\">{sizeAfter}</span></p>\r\n            <span>\r\n              <Button\r\n                className=\"preview-btn\"\r\n                variant=\"success\"\r\n                onClick={() => handlePreviewClick()}\r\n              >\r\n                Preview\r\n              </Button>\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"images-wrapper d-flex justify-content-between align-items-center\">\r\n        {isUpload ? (\r\n          <ImageCard srcData={inputUrl} />\r\n        )\r\n          : (\r\n            <ImageCard srcData={defaultImages.upload} />\r\n          )}\r\n\r\n        <div className=\"buttons-wrapper\">\r\n          {imageName && (\r\n            <Button\r\n              className=\"compressed-button\"\r\n              variant=\"primary\"\r\n              onClick={() => handleCompressClick()}\r\n            >\r\n              Compress\r\n            </Button>\r\n          )}\r\n\r\n          {isClicked && (\r\n            <>\r\n              <a\r\n                href={outputUrl}\r\n                download={imageName}\r\n                className=\"compressed-button btn btn-success line-height\"\r\n                variant=\"info\"\r\n              >\r\n                Download\r\n              </a>\r\n              <Button\r\n                className=\"compressed-button\"\r\n                variant=\"danger\"\r\n                onClick={() => handleResetClick()}\r\n              >\r\n                Repeat\r\n              </Button>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {outputUrl ? (\r\n          <ImageCard srcData={outputUrl} />\r\n        )\r\n          : (\r\n            <ImageCard srcData={defaultImages.compressed} />\r\n          )}\r\n      </div>\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default Compressor;","// libraries\r\nimport React from 'react';\r\n// static\r\nimport Instructions from './Instructions/index';\r\nimport Compressor from './Compressor/index';\r\n// styles\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <Instructions />\r\n            <Compressor />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from 'components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}